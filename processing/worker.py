import os
import torch
import traceback

# Bi·∫øn global n√†y s·∫Ω ƒë∆∞·ª£c kh·ªüi t·∫°o M·ªòT L·∫¶N cho m·ªói worker
worker_data = {}


def init_worker(lock, log_file_path):
    """H√†m kh·ªüi t·∫°o cho m·ªói worker process."""
    worker_pid = os.getpid()
    print(f"[Worker PID: {worker_pid}] Initializing...")

    # Import c√°c module c·∫ßn thi·∫øt b√™n trong worker
    from core.vision import VisionProcessor
    from core.audio import AudioProcessor, AudioEventProcessor
    from core.video import VideoProcessor
    from database.milvus_connector import MilvusConnector
    from database.es_connector import ElasticsearchConnector
    import config

    # T·∫£i model v√† k·∫øt n·ªëi DB M·ªòT L·∫¶N
    milvus_conn = MilvusConnector()
    milvus_conn.setup_visual_collection()
    milvus_conn.setup_audio_event_collection()  # Th√™m setup cho collection m·ªõi

    worker_data["milvus_conn"] = milvus_conn
    worker_data["es_conn"] = ElasticsearchConnector()
    worker_data["vision_processor"] = VisionProcessor(model_id=config.CLIP_MODEL_ID)
    worker_data["audio_processor"] = AudioProcessor(model_id=config.WHISPER_MODEL_ID)
    worker_data["audio_event_processor"] = AudioEventProcessor(
        model_id=config.CLAP_MODEL_ID
    )  # Th√™m processor m·ªõi
    worker_data["video_processor"] = VideoProcessor(
        frame_interval=config.VIDEO_FRAME_EXTRACTION_INTERVAL,
        extraction_method=config.KEYFRAME_EXTRACTION_METHOD,
    )
    worker_data["config"] = config
    # L∆∞u lock v√† ƒë∆∞·ªùng d·∫´n t·ªáp log ƒë·ªÉ c√°c h√†m kh√°c c√≥ th·ªÉ s·ª≠ d·ª•ng
    worker_data["lock"] = lock
    worker_data["log_file_path"] = log_file_path

    print(f"‚úÖ [Worker PID: {worker_pid}] Initialization complete.")


def _process_visual(file_path: str, media_id: str):
    """X·ª≠ l√Ω ph·∫ßn h√¨nh ·∫£nh c·ªßa m·ªôt t·ªáp (·∫£nh ho·∫∑c video)."""
    vp = worker_data["vision_processor"]
    vidp = worker_data["video_processor"]
    milvus_conn = worker_data["milvus_conn"]
    config = worker_data["config"]
    worker_pid = os.getpid()

    visual_batch = []
    # ƒê√£ c√≥ try-except ·ªü h√†m cha (process_single_media_file)
    if file_path.lower().endswith(config.IMAGE_EXTENSIONS):
        embedding = vp.image_to_embedding(file_path)
        if embedding is not None:
            visual_batch.append(
                {"media_id": media_id, "timestamp": 0.0, "vector": embedding[0]}
            )
    elif file_path.lower().endswith(config.VIDEO_EXTENSIONS):
        # S·ª≠ d·ª•ng ph∆∞∆°ng th·ª©c tr√≠ch xu·∫•t keyframe th√¥ng minh m·ªõi
        for frame in vidp.extract_keyframes(file_path):
            embedding = vp.numpy_array_to_embedding(frame["frame_rgb"])
            if embedding is not None:
                visual_batch.append(
                    {
                        "media_id": media_id,
                        "timestamp": frame["timestamp"],
                        "vector": embedding[0],
                    }
                )

    if visual_batch:
        milvus_conn.insert(visual_batch)
        print(
            f"üñºÔ∏è  [Worker PID: {worker_pid}] Inserted {len(visual_batch)} visual vectors for {media_id}"
        )


def _process_audio(file_path: str, media_id: str):
    """X·ª≠ l√Ω ph·∫ßn √¢m thanh c·ªßa m·ªôt t·ªáp (video ho·∫∑c audio)."""
    ap = worker_data["audio_processor"]
    es_conn = worker_data["es_conn"]
    worker_pid = os.getpid()

    # ƒê√£ c√≥ try-except ·ªü h√†m cha (process_single_media_file)
    if not ap.has_audio_stream(file_path):
        print(f"üìù [Worker PID: {worker_pid}] No audio stream detected in {media_id}")
        return

    result = ap.transcribe(file_path)
    if result and result.get("segments"):
        docs = [
            {
                "media_id": media_id,
                "start": s["start"],
                "end": s["end"],
                "text": s["text"],
            }
            for s in result["segments"]
        ]
        es_conn.bulk_insert(docs)
        print(
            f"üó£Ô∏è  [Worker PID: {worker_pid}] Inserted {len(docs)} transcript segments for {media_id}"
        )
    else:
        print(f"üìù [Worker PID: {worker_pid}] No speech detected in {media_id}")


def _process_audio_events(file_path: str, media_id: str):
    """X·ª≠ l√Ω s·ª± ki·ªán √¢m thanh c·ªßa m·ªôt t·ªáp b·∫±ng CLAP."""
    aep = worker_data["audio_event_processor"]
    milvus_conn = worker_data["milvus_conn"]
    worker_pid = os.getpid()
    ap = worker_data["audio_processor"]  # D√πng l·∫°i ƒë·ªÉ ki·ªÉm tra audio stream

    if not ap.has_audio_stream(file_path):
        return  # B·ªè qua n·∫øu kh√¥ng c√≥ audio

    audio_event_batch = []
    for event in aep.extract_event_embeddings(file_path):
        event["media_id"] = media_id
        audio_event_batch.append(event)

    if audio_event_batch:
        milvus_conn.insert_audio_events(audio_event_batch)
        print(
            f"üîä [Worker PID: {worker_pid}] Inserted {len(audio_event_batch)} audio event vectors for {media_id}"
        )


def process_single_media_file(file_path: str):
    """H√†m ch√≠nh ƒë·ªÉ x·ª≠ l√Ω m·ªôt t·ªáp media, ƒëi·ªÅu h∆∞·ªõng v√† ghi log khi th√†nh c√¥ng."""
    media_id = os.path.basename(file_path)
    worker_pid = os.getpid()
    config = worker_data["config"]
    lock = worker_data["lock"]
    log_file_path = worker_data["log_file_path"]

    print(f"‚ñ∂Ô∏è  [Worker PID: {worker_pid}] Processing: {media_id}")

    try:
        file_ext = os.path.splitext(file_path)[1].lower()

        # --- Ph√¢n lo·∫°i v√† x·ª≠ l√Ω ---
        if file_ext in config.IMAGE_EXTENSIONS:
            _process_visual(file_path, media_id)
        elif file_ext in config.VIDEO_EXTENSIONS:
            # Th·ª±c hi·ªán c·∫£ ba t√°c v·ª• cho video
            _process_visual(file_path, media_id)
            _process_audio(file_path, media_id)
            _process_audio_events(file_path, media_id)
        elif file_ext in config.MEDIA_EXTENSIONS:  # Ch·ªâ c√°c t·ªáp audio
            # Th·ª±c hi·ªán c·∫£ hai t√°c v·ª• audio
            _process_audio(file_path, media_id)
            _process_audio_events(file_path, media_id)

        # Ghi v√†o file log KHI V√Ä CH·ªà KHI t·∫•t c·∫£ x·ª≠ l√Ω cho file n√†y th√†nh c√¥ng
        # S·ª≠ d·ª•ng lock ƒë·ªÉ ƒë·∫£m b·∫£o kh√¥ng c√≥ 2 worker c√πng ghi file m·ªôt l√∫c (thread-safe)
        with lock:
            with open(log_file_path, "a") as f:
                f.write(f"{media_id}\n")

        print(f"‚úÖ [Worker PID: {worker_pid}] Finished and logged {media_id}\n")

    except Exception as e:
        # N·∫øu c√≥ b·∫•t k·ª≥ l·ªói n√†o x·∫£y ra, ghi nh·∫≠n n√≥ v√† KH√îNG ghi v√†o log th√†nh c√¥ng.
        # T·ªáp n√†y s·∫Ω ƒë∆∞·ª£c th·ª≠ l·∫°i trong l·∫ßn ch·∫°y ti·∫øp theo.
        print(
            f"üî•üî•üî• [Worker PID: {worker_pid}] FAILED to process {media_id}. It will be retried on next run."
        )
        print(f"Error details: {e}")
        traceback.print_exc()
