from typing import List
from elasticsearch import AsyncElasticsearch
from sentence_transformers import CrossEncoder

import config
from core.vision import VisionProcessor
from core.audio import AudioEventProcessor  # Import processor m·ªõi
from api.schemas import UnifiedResult
from database.milvus_connector import MilvusConnector

# Import c√°c b∆∞·ªõc c·ªßa pipeline
from .search_pipeline.recall import RecallStep
from .search_pipeline.fusion import FusionStep
from .search_pipeline.rerank import RerankStep
from .search_pipeline.format import FormatStep

# --- KH·ªûI T·∫†O C√ÅC T√ÄI NGUY√äN D√ôNG CHUNG ---
# Kh·ªüi t·∫°o m·ªôt l·∫ßn khi service kh·ªüi ƒë·ªông ƒë·ªÉ t·ªëi ∆∞u hi·ªáu su·∫•t
print("üöÄ Initializing Search Service Resources...")

# 1. C√°c model AI
vision_processor = VisionProcessor(config.CLIP_MODEL_ID)
audio_event_processor = AudioEventProcessor(config.CLAP_MODEL_ID)  # Kh·ªüi t·∫°o CLAP
print(f"Loading Re-ranker model: {config.CROSS_ENCODER_MODEL_ID}")
cross_encoder = CrossEncoder(config.CROSS_ENCODER_MODEL_ID, max_length=512)

# 2. K·∫øt n·ªëi c∆° s·ªü d·ªØ li·ªáu
milvus_conn = MilvusConnector()
# T·∫°o m·ªôt h√†m ƒë·ªÉ get collection thay v√¨ m·ªôt bi·∫øn instance
get_milvus_collection = lambda name: milvus_conn.get_collection(name)
es_client = AsyncElasticsearch(f"http://{config.ES_HOST}:{config.ES_PORT}")

print("‚úÖ Search Service is ready!")


class SearchService:
    """
    D·ªãch v·ª• t√¨m ki·∫øm, ƒëi·ªÅu ph·ªëi m·ªôt pipeline g·ªìm c√°c b∆∞·ªõc:
    Recall -> Fusion -> Re-rank -> Format.
    """

    def __init__(self):
        # C√°c t√†i nguy√™n n·∫∑ng ƒë√£ ƒë∆∞·ª£c kh·ªüi t·∫°o b√™n ngo√†i v√† ƒë∆∞·ª£c chia s·∫ª
        self.vision_processor = vision_processor
        self.audio_event_processor = audio_event_processor
        self.get_milvus_collection = get_milvus_collection
        self.es_client = es_client
        self.cross_encoder = cross_encoder

        # --- X√¢y d·ª±ng Pipeline ---
        # M·ªói b∆∞·ªõc ƒë∆∞·ª£c kh·ªüi t·∫°o v·ªõi c√°c dependency c·∫ßn thi·∫øt c·ªßa n√≥.
        self.search_pipeline = [
            RecallStep(
                self.vision_processor,
                self.audio_event_processor,
                self.get_milvus_collection,
                self.es_client,
            ),
            FusionStep(k_rrf=60),
            RerankStep(self.cross_encoder, rerank_weight=2.0),
            FormatStep(self.vision_processor),
        ]

    async def perform_unified_search(
        self, text: str, top_k: int
    ) -> List[UnifiedResult]:
        """
        Th·ª±c hi·ªán t√¨m ki·∫øm h·ª£p nh·∫•t b·∫±ng c√°ch ch·∫°y qua pipeline ƒë√£ ƒë∆∞·ª£c ƒë·ªãnh nghƒ©a.
        """
        print(f"üöÄ Performing unified search for: '{text}' (top_k={top_k})")

        # 1. Chu·∫©n b·ªã context ban ƒë·∫ßu cho pipeline
        context = {
            "query": text,
            "top_k": top_k,
            "k_for_recall": 100,  # L·∫•y nhi·ªÅu ·ª©ng vi√™n h∆°n ·ªü b∆∞·ªõc recall
        }

        # 2. Ch·∫°y tu·∫ßn t·ª± c√°c b∆∞·ªõc trong pipeline
        for step in self.search_pipeline:
            context = await step(context)

        # 3. Tr·∫£ v·ªÅ k·∫øt qu·∫£ cu·ªëi c√πng t·ª´ context
        return context.get("final_results", [])

    async def get_server_info(self) -> dict:
        """L·∫•y th√¥ng tin c∆° b·∫£n v·ªÅ server v√† d·ªØ li·ªáu."""
        visual_collection = None
        audio_event_collection = None
        try:
            es_ok = await self.es_client.ping()
            # Ki·ªÉm tra c·∫£ hai collection
            visual_collection = self.get_milvus_collection(
                config.VISUAL_COLLECTION_NAME
            )
            audio_event_collection = self.get_milvus_collection(
                config.AUDIO_EVENT_COLLECTION_NAME
            )
            milvus_visual_ok = (
                visual_collection.has_partition("_default")
                if visual_collection
                else False
            )
            milvus_audio_event_ok = (
                audio_event_collection.has_partition("_default")
                if audio_event_collection
                else False
            )
        except Exception:
            es_ok = False
            milvus_visual_ok = False
            milvus_audio_event_ok = False

        return {
            "message": "AI Multimodal Search API is running!",
            "version": "3.2.0-advanced-features",
            "database_status": {
                "elasticsearch": "ok" if es_ok else "error",
                "milvus_visual": "ok" if milvus_visual_ok else "error",
                "milvus_audio_event": "ok" if milvus_audio_event_ok else "error",
            },
            "indexed_visuals": (
                visual_collection.num_entities
                if milvus_visual_ok and visual_collection
                else 0
            ),
            "indexed_audio_events": (
                audio_event_collection.num_entities
                if milvus_audio_event_ok and audio_event_collection
                else 0
            ),
            "model_info": self.vision_processor.get_model_info(),
        }
